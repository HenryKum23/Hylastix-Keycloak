server {
    listen 80;
    server_name _;
   
    # Serve static content
    root /usr/share/nginx/html;
    index index.html index.html;  # Added main.html as first option
   
    # Main location with auth protection
    location / {
        auth_request /auth;
        try_files $uri $uri/ /main.html;  # Changed to main.html
       
        # Pass user info to the application
        auth_request_set $user $upstream_http_x_auth_request_user;
        auth_request_set $email $upstream_http_x_auth_request_email;
        proxy_set_header X-User $user;
        proxy_set_header X-Email $email;
    }
   
    # Internal auth endpoint
    location = /auth {
        internal;
        proxy_pass http://keycloak:8080/realms/myrealm/protocol/openid-connect/userinfo;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       
        # Extract user info from response
        proxy_set_header X-Auth-Request-User $upstream_http_x_auth_request_user;
        proxy_set_header X-Auth-Request-Email $upstream_http_x_auth_request_email;
    }
   
    # Handle authentication errors
    error_page 401 = @unauthorized;
    location @unauthorized {
        # Redirect to Keycloak login with proper parameters
        return 302 http://$host:8080/realms/myrealm/protocol/openid-connect/auth?client_id=nginx-app&response_type=code&scope=openid%20profile%20email&redirect_uri=http://$host/callback&state=nginx;
    }
   
    # OAuth callback handler
    location /callback {
        # This should handle the OAuth callback
        # For a full implementation, you'd need additional logic here
        # For now, we'll redirect back to the main page
        return 302 /;
    }
   
    # Logout endpoint
    location /logout {
        return 302 http://$host:8080/realms/myrealm/protocol/openid-connect/logout?redirect_uri=http://$host/;
    }
   
    # Health check endpoint (no auth required)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Test endpoint without auth (for debugging)
    location /test {
        access_log off;
        return 200 "nginx is working without auth\n";
        add_header Content-Type text/plain;
    }
   
    # Proxy Keycloak admin (optional, for easy access)
    location /auth/ {
        proxy_pass http://keycloak:8080/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}